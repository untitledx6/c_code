C51 COMPILER V9.00   COMMANDS                                                              09/16/2019 22:21:39 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE COMMANDS
OBJECT MODULE PLACED IN .\Objects\Commands.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Commands.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -Commands.lst) TABS(2) OBJECT(.\Objects\Commands.obj)

line level    source

   1          #include "Commands.h"
   2          
   3          char Argc;
   4          char **Argv;
   5          
   6          const COMMAND code CommandList[] = {
   7            {"help",Help,"","帮助文档"},
   8            {"clear",Clear,"","清屏"},
   9            {"reboot",Reboot,"","重启"},
  10            {"setbit",SetBit,"<BankID> <PinID>","设置IO口为1"},
  11            {"resetbit",ResetBit,"<BankID> <PinID>","重置IO口为0"},
  12            {"getbit",GetBit,"<BankID> <PinID>","读取IO口状态"},
  13            {NULL,NULL,NULL,NULL}
  14          };
  15          /*****************************************************************************/
  16          void SetBit()
  17          {
  18   1        char argc=Argc;
  19   1        const char **argv=Argv;
  20   1        unsigned char arg2=0;
  21   1        unsigned char newstatus=0;
  22   1        switch(argc)
  23   1        {
  24   2        case 3:
  25   2        
  26   2          arg2=(unsigned char)argv[2][0]-0x30;
  27   2          if(arg2>9)
  28   2          {
  29   3            SendStr(" Invalid 'SetBit' command: arguments not number!\r\n");
  30   3            SendStr(" Usage:\r\n");
  31   3            SendStr("     SetBit 1 1\r\n");
  32   3            break;
  33   3          }
  34   2          if(argv[1][0]=='3'&&(arg2==0||arg2==1))
  35   2          {
  36   3            SendStr(" Invalid 'SetBit' command: P31 and P30 is SerialPort!\r\n");
  37   3            SendStr(" Usage:\r\n");
  38   3            SendStr("     SetBit 1 1\r\n");
  39   3            break;
  40   3          }
  41   2          newstatus=_crol_(1,arg2);
  42   2          if(argv[1][0]=='0')P0|=newstatus;
  43   2          if(argv[1][0]=='1')P1|=newstatus;
  44   2          if(argv[1][0]=='2')P2|=newstatus;
  45   2          if(argv[1][0]=='3')P3|=newstatus;
  46   2          if(argv[1][0]=='4')P4|=newstatus;
  47   2          if(argv[1][0]=='5')P5|=newstatus;
  48   2          if(argv[1][0]=='6')P6|=newstatus;
  49   2          if(argv[1][0]=='7')P7|=newstatus;
  50   2          break;
  51   2        default:
  52   2          SendStr(" Invalid 'SetBit' command: too many arguments\r\n");
  53   2          SendStr(" Example:\r\n");
  54   2          SendStr("     SetBit 1 1\r\n");
C51 COMPILER V9.00   COMMANDS                                                              09/16/2019 22:21:39 PAGE 2   

  55   2          break;
  56   2        }
  57   1      }
  58          
  59          void ResetBit()
  60          {
  61   1        char argc=Argc;
  62   1        const char **argv=Argv;
  63   1        unsigned char arg2=0;
  64   1        unsigned char newstatus=0;
  65   1        switch(argc)
  66   1        {
  67   2        case 3:
  68   2          arg2=(unsigned char)argv[2][0]-0x30;
  69   2          if(arg2>9)
  70   2          {
  71   3            SendStr(" Invalid 'ResetBit' command: arguments not number!\r\n");
  72   3            SendStr(" Usage:\r\n");
  73   3            SendStr("     ResetBit 1 1\r\n");
  74   3            break;
  75   3          }
  76   2          if(argv[1][0]=='3'&&(arg2==0||arg2==1))
  77   2          {
  78   3            SendStr(" Invalid 'ResetBit' command: P31 and P30 is SerialPort!\r\n");
  79   3            SendStr(" Usage:\r\n");
  80   3            SendStr("     ResetBit 1 1\r\n");
  81   3            break;
  82   3          }
  83   2          newstatus=_crol_(0xFE,arg2);
  84   2          if(argv[1][0]=='0')P0&=newstatus;
  85   2          if(argv[1][0]=='1')P1&=newstatus;
  86   2          if(argv[1][0]=='2')P2&=newstatus;
  87   2          if(argv[1][0]=='3')P3&=newstatus;
  88   2          if(argv[1][0]=='4')P4&=newstatus;
  89   2          if(argv[1][0]=='5')P5&=newstatus;
  90   2          if(argv[1][0]=='6')P6&=newstatus;
  91   2          if(argv[1][0]=='7')P7&=newstatus;
  92   2          break;
  93   2        default:
  94   2          SendStr(" Invalid 'ResetBit' command: too many arguments\r\n");
  95   2          SendStr(" Example:\r\n");
  96   2          SendStr("     ResetBit 1 1\r\n");
  97   2          break;
  98   2        }
  99   1      }
 100          
 101          void GetBit()
 102          {
 103   1        char argc=Argc;
 104   1        const char **argv=Argv;
 105   1        unsigned char arg2=0;
 106   1        unsigned char status=0;
 107   1        
 108   1        //P2=0xF0;//测试数据
 109   1        //P3=0x0F;//测试数据
 110   1        switch(argc)
 111   1        {
 112   2        case 3:
 113   2          arg2=(unsigned char)argv[2][0]-0x30;
 114   2          if(arg2>7)
 115   2          {
 116   3            SendStr(" Invalid 'GetBit' command: arguments not number or over 7!\r\n");
C51 COMPILER V9.00   COMMANDS                                                              09/16/2019 22:21:39 PAGE 3   

 117   3            SendStr(" Usage:\r\n");
 118   3            SendStr("     GetBit 1 1\r\n");
 119   3            break;
 120   3          }
 121   2          if(argv[1][0]=='0')status=P0;
 122   2          if(argv[1][0]=='1')status=P1;
 123   2          if(argv[1][0]=='2')status=P2;
 124   2          if(argv[1][0]=='3')status=P3;
 125   2          if(argv[1][0]=='4')status=P4;
 126   2          if(argv[1][0]=='5')status=P5;
 127   2          if(argv[1][0]=='6')status=P6;
 128   2          if(argv[1][0]=='7')status=P7;
 129   2      
 130   2          //SendStr("数据:");
 131   2          //SerialSendHexByte(status);
 132   2          //SendStr("\r\n");
 133   2          SendStr((status&(unsigned char)_crol_(1,arg2))==0?"False":"True");
 134   2          SendStr("\r\n");
 135   2      
 136   2          break;
 137   2        default:
 138   2          SendStr(" Invalid 'GetBit' command: too many arguments\r\n");
 139   2          SendStr(" Example:\r\n");
 140   2          SendStr("     GetBit 1 1\r\n");
 141   2          break;
 142   2        }
 143   1      }
 144          
 145          void Help()
 146          {
 147   1        char argc=Argc;
 148   1        const char **argv=Argv;
 149   1        char i;
 150   1        switch(argc)
 151   1        {
 152   2        case 1:
 153   2          for(i = 0; CommandList[i].HelpString!=NULL; i++)
 154   2          {
 155   3            SendStr(" ");
 156   3            SendStr2(CommandList[i].CommandName,F_RED,DEFAULT_B_COLOR);
 157   3            SendStr(" ");
 158   3            SendStr2(CommandList[i].Metadata,F_GREEN,DEFAULT_B_COLOR);
 159   3            SendStr2(" -- ",F_YELLOW,DEFAULT_B_COLOR);
 160   3            SendStr2(CommandList[i].HelpString,F_YELLOW,DEFAULT_B_COLOR);
 161   3            SendStr("\r\n");
 162   3          }
 163   2          SendStr("\r\n");
 164   2          break;
 165   2        default:
 166   2          SendStr(" 无效的操作: 参数过多\r\n");
 167   2          SendStr(" 例子:\r\n");
 168   2          SendStr("     help\r\n");
 169   2          break;
 170   2        }
 171   1      }
 172          
 173          void Clear()
 174          {
 175   1        char argc=Argc;
 176   1        const char **argv=Argv;
 177   1        switch(argc)
 178   1        {
C51 COMPILER V9.00   COMMANDS                                                              09/16/2019 22:21:39 PAGE 4   

 179   2        case 1:
 180   2          SendStr(CLEARSCREEN); 
 181   2          SendStr(CURSORHOME);
 182   2          break;
 183   2        default:
 184   2          SendStr(" Invalid 'clear' command: too many arguments\r\n");
 185   2          SendStr(" Usage:\r\n");
 186   2          SendStr("     clear\r\n");
 187   2          break;
 188   2        }
 189   1      }
 190          
 191          void Reboot()
 192          {
 193   1        char argc=Argc;
 194   1        const char **argv=Argv;
 195   1        switch(argc)
 196   1        {
 197   2        case 1:
 198   2          (*(void(*)())0)(); 
 199   2          break;
 200   2        default:
 201   2          SendStr(" Invalid 'reboot' command: too many arguments\r\n");
 202   2          SendStr(" Usage:\r\n");
 203   2          SendStr("     reboot\r\n");
 204   2          break;
 205   2        }
 206   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1085    ----
   CONSTANT SIZE    =    955    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      25
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
